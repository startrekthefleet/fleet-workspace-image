---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
  - name: Verify install_files is present
    debug: msg="install_files/_README = {{ lookup('file', '/home/kasm-default-profile/install_files/_README') }}"  
    # Detect if we are running on a WSL2 environment
  - name: Verify install_files is present
    debug: msg="install_files/_README = {{ lookup('file', '/home/kasm-default-profile/install_files/_README') }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\[\033[00;32m\][\w]\$\[\033[00m\] "'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

-
  # Install build-essential
  hosts: localhost
  connection: local
  tags:
  - install_generator_plantuml
  - install_generator_asciidoctor
  - install_doctools

  tasks:
  - name: Install build-essential
    apt:
      name: build-essential
      update_cache: yes

-
  # install firefox
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_firefox

  roles:
    - role: do1jlr.install_firefox

-
  # install keychain, git, and @capsulecorplab .vimrc and .gitconfig
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_utilities

  vars:
    git_version: "2.38.1"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu20.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-1"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Install dh-autoreconf
    apt:
      name: dh-autoreconf
      update_cache: yes
  - name: Install libcurl4-gnutls-dev
    apt:
      name: libcurl4-gnutls-dev
      update_cache: yes
  - name: Install libexpat1-dev
    apt:
      name: libexpat1-dev
      update_cache: yes
  - name: Install gettext
    apt:
      name: gettext
      update_cache: yes
  - name: Install libz-dev
    apt:
      name: libz-dev
      update_cache: yes
  - name: Install libssl-dev
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Install install-info
    apt:
      name: install-info
      update_cache: yes
  - name: Extract git source files
    unarchive:
      src: /home/kasm-default-profile/install_files/git-2.38.1.tar.gz
      dest: /home/kasm-default-profile/install_files/
      remote_src: yes
      creates: /home/kasm-default-profile/install_files/git-2.38.1/README.md
  - name: Build git
    shell:
      cmd: make configure && ./configure --prefix=/usr && make > /tmp/git_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/install_files/git-2.38.1
      executable: /bin/bash
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell:
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected
  - name: Install @capsulecorplab .vimrc
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/495058e7a57ed8adaed3c40c80d09739/raw/4a6e6f6ff92b96919be111c9cbb5a4a21ab472d2/.vimrc
      dest: /home/kasm-default-profile/
  - name: Install @capsulecorplab .gitconfig
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/401ba2fe0857a328f2a626adbf078cc6/raw/b89a6234f0d620ff60bcfe37f95de197b8772377/.gitconfig
      dest: /home/kasm-default-profile/

-
  # install Python packages with pip
  hosts: localhost
  connection: local
  gather_facts: yes

  tasks:
  - name: Update OS to point python to python3
    apt:
      name: python-is-python3
      update_cache: yes
  - name: Install pip for python3 with Apt
    apt:
      name: python3-pip
      update_cache: yes
  - name: Install python packages with pip
    pip:
      name:
        - jupyterlab
        - notebook
        - voila
        - pint

-
  # install ASCII Doctor
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
  - install_generator_asciidoctor
  - install_doctools

  vars:
    asciidoctor_version: 2.0.17
    asciidoctor_version_expected: "{{ asciidoctor_version }}[.]"

  tasks:
  - name: Install Ruby
    apt:
      name: ruby-full
      update_cache: yes
  - name: Run gem install for asciidoctor
    shell:
      cmd: "gem install asciidoctor -v {{ asciidoctor_version }}"
  - name: Install hexapdf dependencies
    apt:
      name: libssl-dev
      update_cache: yes
  - name: Install PlantUML and PDF support
    shell:
      cmd: gem install asciidoctor-diagram rghost hexapdf text-hyphen rouge pygments.rb coderay asciidoctor-pdf
  - name: Get asciidoctor version
    shell: asciidoctor --version | grep Asciidoctor | sed 's/[[:alpha:]|(|[:space:]]//g' | sed 's/[*~://]//g'
    register: installed_asciidoctor_version
  - name: Display asciidoctor version
    debug:
      msg: "ASCII Doctor = {{ installed_asciidoctor_version.stdout }}"
  - name: Test asciidoctor version
    fail:
      msg: "ASCII Doctor Version Error: Expected {{ asciidoctor_version_expected }} | Found {{ installed_asciidoctor_version.stdout }}"
    when: installed_asciidoctor_version.stdout != asciidoctor_version_expected

- 
  # install sudo for the vs-code role below 
  hosts: localhost
  connection: local
  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local
  tasks:
  - name: Add dev user
    user:
      name: dev
      uid: 1001

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  environment: 
    DONT_PROMPT_WSL_INSTALL: 1
  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - ms-python.python
            - dendron.dendron
            - foam.foam-vscode
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # install PlantUML
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
  - install_generator_plantuml
  - install_doctools

  vars:
    jdk_version: 2:1.11-72
    graphviz_version_expected: "dot - graphviz version 2.50.0 (20211204.2007)"

  tasks:
  - name: Install JDK
    apt:
      name: "default-jdk={{ jdk_version }}"
      update_cache: yes
  - name: Get JDK Version
    shell: java --version | grep -m 1 -i openjdk
    register: installed_jdk_version
  - name: Install pre-reqs to build graphviz
    apt:
      name: libcairo2-dev, libexpat-dev, libfreetype-dev, libgd-dev, fontconfig-config, libglib2.0-dev, libgtk2.0-dev, libpng-dev, zlib1g-dev, libsdl-pango-dev, libgts-bin, libgtk-3-dev, libgtkglext1-dev, glade, freeglut3-dev, autoconf, automake, bison, flex, ghostscript, libtool, pkg-config, swig
      update_cache: yes
  - name: Expand source files archive
    unarchive:
      src: /home/kasm-default-profile/install_files/graphviz-2.50.0.tar.gz
      dest: /home/kasm-default-profile/install_files/
      remote_src: yes
      creates: /home/kasm-default-profile/install_files/graphviz-2.50.0/README
  - name: Build graphviz
    shell:
      cmd: ./configure --enable-perl=no && make > /tmp/graphviz_build_output.txt 2>&1 && make install
      chdir: /home/kasm-default-profile/install_files/graphviz-2.50.0/
      executable: /bin/bash
  - name: Get graphviz version
    shell: dot -V
    register: installed_graphviz_version
  - name: install plantuml
    copy:
      src: /home/kasm-default-profile/install_files/plantuml.jar
      dest: /usr/local/bin/plantuml.jar
      remote_src: yes
  - name: Display JDK and GraphViz versions
    debug:
      msg: "JDK = {{ installed_jdk_version.stdout }} | graphviz = {{ installed_graphviz_version.stderr }}"
  - name: Test Graphviz version
    fail:
      msg: "Graphviz Version Error: Expected {{ graphviz_version_expected }} | Found {{ installed_graphviz_version.stderr }}"
    when: installed_graphviz_version.stderr != graphviz_version_expected

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes 

-
  hosts: localhost
  connection: local

  tasks:
  - name: Download source setup
    get_url:
      url: https://deb.nodesource.com/setup_17.x
      dest: /root/nodesource_setup.sh
      mode: 0700

  - name: Set Node source in apt
    shell:
      cmd: /root/nodesource_setup.sh
      executable: /bin/bash

  - name: Apt install NodeJS
    apt:
      name: nodejs
      update_cache: yes

# Three dots indicate the end of a YAML document
...
